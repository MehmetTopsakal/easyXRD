import numpy as np
import os,pickle,sys,fnmatch,shutil,yaml
from os.path import join
from pathlib import Path
from copy import deepcopy
import time
import json
import imageio 
import traceback
from scipy.stats import rankdata
from scipy import interpolate
from scipy.stats import pearsonr, spearmanr, kendalltau
from scipy.stats import rankdata


from datetime import datetime


import matplotlib.pyplot as plt

#import matplotlib.pyplot as plt
#from matplotlib import gridspec
#plt.rcParams.update({'figure.max_open_warning': 0})
#plt.rc('text', usetex=False) 


import ipywidgets as widgets
from ipywidgets import  HBox, VBox, interactive_output
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm







class TIFF():
    "This class stores all information associated with tiff file generated by xpdAcq"
    
    def __init__(self,
                 abspath,samplename=None,read_meta=True,read_img=False,read_msk=False,
                 motor1=None,pos1=None,motor2=None,pos2=None):

        suffix = Path(abspath).suffix
        filename = Path(abspath).name.split(suffix)[0]
        parent = str(Path(abspath).parent)

        if samplename:
            
            datetime = filename[len(samplename)+1:len(samplename)+16]
            timestamp = int(time.mktime(time.strptime(datetime, '%Y%m%d-%H%M%S')))
            
            splt = filename[len(samplename)+17:]
            
            if motor1 and (motor1 in filename):
                pos1 = float(splt.split(motor1)[1].split('_')[1].replace(',','.'))
                if motor2 and (motor2 in filename):
                    pos2 = float(splt.split(motor2)[1].split('_')[1].replace(',','.'))
                    meta_id = splt.split(motor2)[1].split('_')[-5]
                    ind = int(splt.split(motor2)[1].split('_')[-4])
                else:
                    meta_id = splt.split(motor1)[1].split('_')[-5]      
                    ind = int(splt.split(motor1)[1].split('_')[-4]) 
                    pos2 = []
            else:
                meta_id = splt.split('_')[-5]
                ind = int(splt.split('_')[-4])
                pos1 = []; pos2 = []


            self.info = {
                'samplename':samplename,
                'abspath':os.path.abspath(abspath),
                'suffix':suffix,
                'parent':parent,
                'filename':filename,
                'datetime':datetime,
                'timestamp':timestamp,
                'ind':ind,
                'meta_id':meta_id,
                'pos1':pos1,
                'pos2':pos2,  
                'temp':[] }
        else:
            
            self.info = {
                'samplename':filename,
                'abspath':os.path.abspath(abspath),
                'suffix':suffix,
                'parent':parent,
                'filename':filename,
                'datetime':[],
                'timestamp':[],
                'ind':[],
                'meta_id':[],
                'dx':[],
                'pos2':[],  
                'temp':[] }            


        if read_meta and not os.path.isfile(read_meta):
            try:
                for file in os.listdir(join(self.info['parent'],'..','meta')):
                    if fnmatch.fnmatch(join(self.info['parent'],'..','meta',file), "*"+self.info['meta_id']+'*.yaml'):
                        self.meta = yaml.load(open(join(self.info['parent'],'..','meta',file)), Loader=yaml.Loader)
                        self.info['meta_abspath'] = join(self.info['parent'],'..','meta',file)
            except Exception as exc:
                self.meta = None
                print('TIFF ERROR: unable to read meta data!'+
                      '\n%s' % (exc))
        elif os.path.isfile(read_meta):
            self.meta = yaml.load(open(read_meta), Loader=yaml.Loader)
            self.info['meta_abspath'] = os.path.abspath(read_meta)
        else:
            self.meta = None
            self.info['meta_abspath'] = None
        
            
        if read_img and os.path.isfile( self.info['abspath']):
            self.img = imageio.imread(abspath)   
        else:
            self.img = None

  
        if read_msk:
            if os.path.isfile( self.info['abspath'].replace('.tiff','_mask.npy')  ):
                self.msk = np.load(self.info['abspath'].replace('.tiff','_mask.npy')) 
                self.msk = self.msk.astype(bool)
            elif os.path.isfile( self.info['abspath'].replace('.tiff','.msk')  ):
                import fabio
                fo = fabio.open( self.info['abspath'].replace('.tiff','.msk') )
                self.msk = np.flipud(~fo.data.astype(bool)) 
            elif os.path.isdir(join(self.info['parent'],'..','mask')):
                for file in os.listdir(join(self.info['parent'],'..','mask')):
                    import fabio
                    if fnmatch.fnmatch(file,filename[:-19].replace(self.info['datetime'],'*')+'.msk'):
                        fo = fabio.open( join(self.info['parent'],'..','mask',file) )
                        self.msk = np.flipud(~fo.data.astype(bool))
                        break
                    elif fnmatch.fnmatch(file,filename.replace(self.info['datetime'],'*')+'.msk'):
                        fo = fabio.open( join(self.info['parent'],'..','mask',file) )
                        self.msk = np.flipud(~fo.data.astype(bool))
                        break 
            
        else:
            self.msk = None   
            
        self.iq = None
        self.itth = None
        # first tiff path for chi file, then integration, then iq    
        if os.path.isfile( self.info['abspath'].replace('.tiff','.chi')  ):
            self.iq = np.loadtxt( self.info['abspath'].replace('.tiff','.chi'), unpack=True,
                                 comments=['#','\''], usecols=(0,1), skiprows=8)
            pre_factor = self.meta['bt_wavelength'] / (4 * np.pi)
            TTH = np.rad2deg( 2 * np.arcsin( self.iq[0] * pre_factor) )  
            self.itth = np.array([TTH,self.iq[1]])    
        elif os.path.isdir(join(self.info['parent'],'..','iq')):
            for file in os.listdir(join(self.info['parent'],'..','iq')):
                if fnmatch.fnmatch(file,filename.replace(self.info['datetime'],'*')+'.chi'):                    
                    self.iq = np.loadtxt(join(self.info['parent'],'..','iq',file), unpack=True,
                                         comments=['#','\''], usecols=(0,1), skiprows=8)
                    pre_factor = self.meta['bt_wavelength'] / (4 * np.pi)
                    TTH = np.rad2deg( 2 * np.arcsin( self.iq[0] * pre_factor) )  
                    self.itth = np.array([TTH,self.iq[1]])                     
                    break
        elif os.path.isdir(join(self.info['parent'],'..','integration')):
            for file in os.listdir(join(self.info['parent'],'..','integration')):
                if fnmatch.fnmatch(file,filename[:-19].replace(self.info['datetime'],'*')+'_mean_q.chi'):                    
                    self.iq = np.loadtxt(join(self.info['parent'],'..','integration',file), unpack=True,
                                         comments=['#','\''], usecols=(0,1), skiprows=8)
                    pre_factor = self.meta['bt_wavelength'] / (4 * np.pi)
                    TTH = np.rad2deg( 2 * np.arcsin( self.iq[0] * pre_factor) )  
                    self.itth = np.array([TTH,self.iq[1]])                     
                    break          
            
            
            
            
            

      

    #int_params = {'bg_file':None, 'mask_file':None, 'bg_scale':1.0,
                    #'polarization':0.99, 'edge':20, 'lower_thresh':None,
                    #'alpha':2.5, 'auto_type':'mean', 'mask_settings':'auto',
                    #'flip_input_mask':False,'cleanup':True,'overwrite':False} 
    #t.integrate(**int_params)                
    
    def integrate(self,
        poni=None,
        bg_file=None, mask_file=None,bg_scale=1.0,
        polarization=0.99, edge=20, lower_thresh=None,
        alpha=2.5, auto_type='mean', mask_settings='auto',
        flip_input_mask=False, cleanup=True, overwrite=False,
        verbose=False):
            
        if os.path.isfile(self.info['abspath'].replace('.tiff','.chi')) and not overwrite:
            
            if os.path.isfile(self.info['abspath'].replace('.tiff','.msk')):
                import fabio
                fo = fabio.open( self.info['abspath'].replace('.tiff','.msk') )
                self.msk = np.flipud(~fo.data.astype(bool))               
            if verbose:
                print('%s is already integrated (overwrite=False). Skipping....'%(self.info['filename']))
            
        else:
        

            if poni is None:
                if not os.path.isfile(self.info['meta_abspath'].replace('.yaml','.poni')):
                    from pyFAI.azimuthalIntegrator import AzimuthalIntegrator
                    ai = AzimuthalIntegrator()
                    ai.setPyFAI(**self.meta['calibration_md'])
                    ai.save(self.info['meta_abspath'].replace('.yaml','.poni')) ## NOTE: doesn't overwrite
                    poni_path=self.info['meta_abspath'].replace('.yaml','.poni')
                else:
                    poni_path=self.info['meta_abspath'].replace('.yaml','.poni')
            elif os.path.isfile(poni):
                poni_path = poni
            else:
                print('ERROR:\nponi file needed!!!')


            try:
                del xpdtools_processtiff
            except:
                pass
            from xpdtools.cli.process_tiff import main as xpdtools_processtiff

            xpdtools_processtiff(image_files=self.info['abspath'], 
                    poni_file=poni_path, 
                    bg_file=bg_file, mask_file=mask_file, bg_scale='bg_scale',
                    polarization=polarization, edge=edge, lower_thresh=lower_thresh,
                    alpha=alpha, auto_type=auto_type, mask_settings=mask_settings,
                    flip_input_mask=flip_input_mask);

            self.iq = np.loadtxt(self.info['abspath'].replace('.tiff','.chi'),unpack=True,comments=['#','\''], usecols=(0,1), skiprows=8)

            pre_factor = self.meta['bt_wavelength'] / (4 * np.pi)
            TTH = np.rad2deg( 2 * np.arcsin( self.iq[0] * pre_factor) )  
            self.itth = np.array([TTH,self.iq[1]]) 

            out = np.column_stack( (TTH,self.iq[1]) )
            np.savetxt(self.info['abspath'].replace('.tiff','.xy'), out, delimiter=' ')

            if mask_settings=='none':
                self.msk = None             
            else:
                import fabio
                fo = fabio.open( self.info['abspath'].replace('.tiff','.msk') )
                self.msk = np.flipud(~fo.data.astype(bool))             

            if cleanup:
                os.remove('meta.poni') if os.path.exists('meta.poni') else None
                os.remove('img.poni') if os.path.exists('img.poni') else None
                for c in ['_median.chi','_std.chi','_zscore.tif']:
                    try:
                        os.remove(self.info['abspath'].replace('.tiff',c))
                    except:
                        pass   

        self.mask_params = locals()

  

                
    def plot(self,y_bottom=2,savefig=False):   
        
        try:
            masked_img = self.img.copy()
            masked_img[~self.msk] = np.nan 
            masked_img_avail = True
        except:
            masked_img_avail = False
            masked_img = self.img.copy()

        def plotter(cmap,vmax,vmin):
            
            fig = plt.figure(figsize=(12,6))
            
            ax = fig.add_subplot('121')
            ax.imshow(masked_img,cmap=cmap,vmin=vmin,vmax=vmax )   
            

            if masked_img_avail:
                ax.set_title(self.info['samplename']+' (masked)')
            else:
                ax.set_title(self.info['samplename']) 
                
            if self.meta:
                #time_from_meta = self.meta['original_start_time']
                #time_from_meta = datetime.fromtimestamp(time_from_meta)  

                try:
                    time_from_meta = self.meta['original_start_time']
                    time_from_meta = datetime.fromtimestamp(time_from_meta)  
                except:
                    time_from_meta = self.info['datetime']                  
                
                try:
                    self.meta['sp_computed_exposure']
                except:
                    self.meta['sp_computed_exposure'] = 0
                try:
                    self.meta['sp_time_per_frame']
                except:
                    self.meta['sp_time_per_frame'] = 0


                fltr = self.meta['filter_positions']
                filterstr='%s-%s-%s-%s' %(fltr['flt1'],fltr['flt2'],fltr['flt3'],fltr['flt4'])
                textstr = 'start time=%s\nexposure=%.1fsec. tpf=%.1fsec. filters: %s'%(
                        time_from_meta,
                        self.meta['sp_computed_exposure'],
                        self.meta['sp_time_per_frame'],
                        filterstr)
                props = dict(boxstyle='none', facecolor='wheat', alpha=0.5)    
                ax.text(0.0, -0.07, textstr, transform=ax.transAxes, 
                        fontsize=12,verticalalignment='top')                
                
            if isinstance(self.iq,np.ndarray):
                ax = fig.add_subplot('122')
                ax.plot(self.iq[0],self.iq[1]) 
                ax.plot([min(self.iq[0]),max(self.iq[0])],[vmin,vmin],'--r')
                ax.plot([min(self.iq[0]),max(self.iq[0])],[vmax,vmax],':b')            
                ax.set_yscale('log')
                ax.set_ylim(bottom=y_bottom)
                ax.set_xlabel(u'2$\Theta$ ($^o$)', fontsize=12)
                ax.set_ylabel(u'Intensity', fontsize=12)            
            
            plt.tight_layout()
            
            if savefig:
                plt.savefig( self.info['abspath'].replace('.tiff','.pdf')  )

        cmap_sel = widgets.Dropdown(
            layout = widgets.Layout(width='200px', height='30px'),
            options=['jet', 'viridis', 'gray','binary'],
            value='jet',
            description='Color map:',
            disabled=False,
        )

        vmin_slider = widgets.IntSlider(
            layout = widgets.Layout(width='300px', height='30px'),
            value=0,
            min=0,
            max=np.mean(masked_img),
            description='vmin',
            disabled=False,
            continuous_update=False,
            orientation='horizontal',
            readout=True,
            readout_format='d',
        )

        vmax_slider = widgets.IntSlider(
            layout = widgets.Layout(width='300px', height='30px'),
            value=np.mean(masked_img),
            min=np.mean(masked_img)/2,
            max=np.amax(masked_img)/10,
            description='vmax',
            disabled=False,
            continuous_update=False,
            orientation='horizontal',
            readout=True,
            readout_format='d',
        )
        
        widgets.jslink((vmin_slider, 'value'), (vmax_slider, 'min'))


        tiff_fig = interactive_output(plotter, 
                                     {"cmap":cmap_sel,"vmax":vmax_slider,"vmin":vmin_slider})

        ui = VBox([HBox([vmin_slider,vmax_slider,cmap_sel]),tiff_fig])
        return ui
                
                
                
                
    def plot_nowidget(self,cmap='jet',vmin=None,vmax=None,y_bottom=2,
                            savefig=False,savefig_to=None,
                            tbg=None,bgscale=1.0,write_bg_xy=True):   
        
        try:
            masked_img = self.img.copy()
            masked_img[~self.msk] = np.nan 
            masked_img_avail = True
        except:
            masked_img_avail = False
            masked_img = self.img.copy()
            
        if vmin is None:
            vmin = 0
        if vmax is None:
            vmax = np.mean(masked_img)
        if cmap is None:
            cmap = 'jet'

        fig = plt.figure(figsize=(12,6))
        
        ax = fig.add_subplot('121')
        ax.imshow(masked_img,cmap=cmap,vmin=vmin,vmax=vmax)    

        if masked_img_avail:
            ax.set_title(self.info['filename'][0:40]+' (masked)')
        else:
            ax.set_title(self.info['filename'][0:40]) 
            
        if self.meta:
            
            try:
                time_from_meta = self.meta['original_start_time']
                time_from_meta = datetime.fromtimestamp(time_from_meta)  
            except:
                time_from_meta = self.info['datetime']                
                          
            fltr = self.meta['filter_positions']
            filterstr='%s-%s-%s-%s' %(fltr['flt1'],fltr['flt2'],fltr['flt3'],fltr['flt4'])
            textstr = 'start time=%s\nexposure=%.1fsec. tpf=%.1fsec. filters: %s'%(
                    time_from_meta,
                    self.meta['sp_computed_exposure'],
                    self.meta['sp_time_per_frame'],
                    filterstr)
            props = dict(boxstyle='none', facecolor='wheat', alpha=0.5)    
            ax.text(0.0, -0.07, textstr, transform=ax.transAxes, 
                    fontsize=12,verticalalignment='top')                
            
        if isinstance(self.iq,np.ndarray):
            ax = fig.add_subplot('122')
            
            if tbg:
                ax.plot(self.itth[0],self.itth[1],'-k',lw=3) 
                ax.plot(self.itth[0],self.itth[1]-tbg.itth[1]*bgscale,'-y',lw=2,label='background subtracted') 
                ax.legend()
                if write_bg_xy:
                    out = np.column_stack( (self.itth[0],self.itth[1]-tbg.itth[1]*bgscale) )
                    np.savetxt(self.info['abspath'].replace('.tiff','_bg_subtraced.xy'), out, delimiter=' ')
            else:                
                ax.plot(self.itth[0],self.itth[1],'-k',lw=3) 
                if os.path.isfile(self.info['abspath'].replace('.tiff','_bg_subtraced.xy')):
                    os.remove(self.info['abspath'].replace('.tiff','_bg_subtraced.xy'))
                
            ax.plot([min(self.itth[0]),max(self.itth[0])],[vmin,vmin],'--r')
            ax.plot([min(self.itth[0]),max(self.itth[0])],[vmax,vmax],':b')                
            ax.set_yscale('log')
            ax.set_ylim(bottom=y_bottom)
            ax.set_xlabel(u'2$\Theta$ ($^o$)', fontsize=12)
            ax.set_ylabel(u'Intensity', fontsize=12)            
        
        plt.tight_layout()
              
        if savefig:
            if savefig_to:
                plt.savefig( join(savefig_to,self.info['abspath'].replace('.tiff','.pdf')) ) 
            else:
                plt.savefig( self.info['abspath'].replace('.tiff','.pdf') )                  
                
             
             
             



             
      
             
                
    def __str__(self):
        print(self.info)
        return 'Tiff file from %s' % (self.info['abspath'])





















class SAMPLE():
    
    def __init__(self,
                 samplepath,
                 samplename=None,
                 tiff_ext='.tiff', verbose=False,
                 integrate=False, int_params=None,
                 read_meta=True, read_img=False, read_msk=False,
                 motor1=None,pos1=None,motor2=None,pos2=None):
        #super(SAMPLE, self).__init__()
        
        self.samplepath = samplepath
        
        if samplename is None:
            self.samplename = Path(self.samplepath).name
        else:
            self.samplename = samplename
             
        tiff_list = []
        for file in os.listdir(join(samplepath,'dark_sub')):
            if fnmatch.fnmatch(file, '*'+tiff_ext):
                tiff_list.append(file)  

                

        tiffs = []
        for e,i in enumerate(tiff_list):
            try:
                if verbose:
                    print('(%d/%d) reading %s'%(e,len(tiff_list),i))
                tiff = TIFF(join(samplepath,'dark_sub',i),self.samplename,
                                                  read_meta,read_img,read_msk,
                                                  motor1,pos1,motor2,pos2)                   
                if integrate:
                    
                    if int_params:
                        tiff.integrate(int_params)
                    else:
                        int_params = {'bg_file':None, 'mask_file':None, 'bg_scale':1.0,
                                        'polarization':0.99, 'edge':20, 'lower_thresh':None,
                                        'alpha':2.5, 'auto_type':'mean', 'mask_settings':'auto',
                                        'flip_input_mask':False,'cleanup':True,'overwrite':False} 
                        tiff.integrate(int_params)
                    
                tiffs.append([deepcopy(tiff),tiff.info['timestamp']])
            except Exception as exc:
                print('SAMPLE ERROR: unable to read %s \n%s\n' % (i,exc)) 
                print(traceback.format_exc())
        
        tiffs.sort(key=lambda x: x[1])   
        
        self.tiffs = [i[0] for i in tiffs]
        



